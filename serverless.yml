service: jaypi
frameworkVersion: '>=2.25.2 < 3.0.0'
useDotenv: true
plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: go1.x
  region: ap-southeast-2
  stage: ${opt:staging, 'staging'}
  lambdaHashingVersion: 20201221
  memorySize: 128
  timeout: 10
  deploymentBucket:
    name: delegator-countdown-sls
    serverSideEncryption: AES256
  iam:
    role: arn:aws:iam::135314794262:role/lambda-jaypi-${opt:staging, 'staging'}
  environment:
    JAYPI_TABLE: jaypi-${opt:staging, 'staging'}
  apigateway:
    shouldStartNameWithService: true
    description: ${opt:staging, 'staging'}-jaypi-apigw

package:
  individually: true
  exclude:
    - ./**

functions:
  # Chune Machine
  chuneMachine:
    handler: source/bin/chuneMachine
    name: chune-machine-${self:provider.stage}
    description: "Listen to what's playing on JJJ"
    timeout: 20
    reservedConcurrency: 1
    package:
      include:
        - ./source/bin/chuneMachine
    environment:
      SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}
      SPOTIFY_SECRET_ID: ${env:SPOTIFY_SECRET_ID}
      REFRESH_QUEUE: https://sqs.ap-southeast-2.amazonaws.com/135314794262/chune-refresh-${self:provider.stage}
      COUNTER_QUEUE: https://sqs.ap-southeast-2.amazonaws.com/135314794262/bean-counter-${self:provider.stage}
    tags:
      Environment: ${self:provider.stage}
      Component: music
      Type: service
    events:
      - sqs:
          arn: arn:aws:sqs:ap-southeast-2:135314794262:chune-refresh-${self:provider.stage}
          batchSize: 1
          enabled: true

  # Bean Counter
  beanCounter:
    handler: source/bin/beanCounter
    name: bean-counter-${self:provider.stage}
    description: "Calculate everyone's points when a song is played"
    memorySize: 128
    timeout: 20
    reservedConcurrency: 1
    package:
      include:
        - ./source/bin/beanCounter
    environment:
      SCORER_QUEUE: https://sqs.ap-southeast-2.amazonaws.com/135314794262/scorer-${self:provider.stage}
    tags:
      Environment: ${self:provider.stage}
      Component: scoring
      Type: service
    events:
      - sqs:
          arn: arn:aws:sqs:ap-southeast-2:135314794262:bean-counter-${self:provider.stage}
          batchSize: 1
          enabled: true

  # Score Taker
  scoreTaker:
    handler: source/bin/scoreTaker
    name: score-taker-${self:provider.stage}
    description: "Update each voters score"
    timeout: 20
    reservedConcurrency: 100
    package:
      include:
        - ./source/bin/scoreTaker
    tags:
      Environment: ${self:provider.stage}
      Component: scoring
      Type: service
    events:
      - sqs:
          arn: arn:aws:sqs:ap-southeast-2:135314794262:scorer-${self:provider.stage}
          batchSize: 1
          enabled: true

  # Town Crier
  townCrier:
    handler: source/bin/townCrier
    name: town-crier-${self:provider.stage}
    description: "Sends notifications out to users"
    timeout: 20
    reservedConcurrency: 100
    package:
      include:
        - ./source/bin/townCrier
    tags:
      Environment: ${self:provider.stage}
      Component: notifications
      Type: service
    events:
      - sqs:
          arn: arn:aws:sqs:ap-southeast-2:135314794262:town-crier-${self:provider.stage}
          batchSize: 1
          enabled: false

  # ACCOUNT
  authorizer:
    handler: source/bin/authorizer
    name: ${self:service}-authorizer-${self:provider.stage}
    description: "Authorizes incoming APIGW requests and verifies the token"
    environment:
      JWT_VERIFY_KEY: ${env:JWT_VERIFY_KEY}
    tags:
      Environment: ${self:provider.stage}
      Component: authentication
      Type: integration
    package:
      include:
        - ./source/bin/authorizer

  signup:
    handler: source/bin/signup
    name: account-signup-${self:provider.stage}
    description: "Signup with email and password"
    package:
      include:
        - ./source/bin/signup
    tags:
      Environment: ${self:provider.stage}
      Component: authentication
      Type: integration
    events:
      - http:
          path: account/signup
          method: post
          request:
            schema:
              application/json: ${file(schemas/account/signup.json)}

  signin:
    handler: source/bin/signin
    name: account-signin-${self:provider.stage}
    description: "Sign in with email and password"
    package:
      include:
        - ./source/bin/signin
    tags:
      Environment: ${self:provider.stage}
      Component: authentication
      Type: integration
    events:
      - http:
          path: account/signin
          method: post
          request:
            schema:
              application/json: ${file(schemas/account/signin.json)}

  authenticate:
    handler: source/bin/oauthAuthenticate
    name: oauth-authenticate-${self:provider.stage}
    description: "Retrieves a login URL for a chosen oauth provider"
    environment:
      OAUTH_CALLBACK_HOST: "http://localhost:8080"
      GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
      GOOGLE_SECRET_ID: ${env:GOOGLE_SECRET_ID}
      FACEBOOK_CLIENT_ID: ${env:FACEBOOK_CLIENT_ID}
      FACEBOOK_SECRET_ID: ${env:FACEBOOK_SECRET_ID}
      GITHUB_CLIENT_ID: ${env:GH_CLIENT_ID}
      GITHUB_SECRET_ID: ${env:GH_SECRET_ID}
    package:
      include:
        - ./source/bin/oauthAuthenticate
    tags:
      Environment: ${self:provider.stage}
      Component: authentication
      Type: integration
    events:
      - http:
          path: oauth/{provider}/login
          method: get
          request:
            parameters:
              paths:
                provider: true

  oauthCallback:
    handler: source/bin/oauthCallback
    name: oauth-callback-${self:provider.stage}
    description: "Provides a url for oauth providers to redirect to"
    environment:
      OAUTH_CALLBACK_HOST: "http://localhost:8080"
      GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
      GOOGLE_SECRET_ID: ${env:GOOGLE_SECRET_ID}
      FACEBOOK_CLIENT_ID: ${env:FACEBOOK_CLIENT_ID}
      FACEBOOK_SECRET_ID: ${env:FACEBOOK_SECRET_ID}
      GITHUB_CLIENT_ID: ${env:GH_CLIENT_ID}
      GITHUB_SECRET_ID: ${env:GH_SECRET_ID}
    package:
      include:
        - ./source/bin/oauthCallback
    tags:
      Environment: ${self:provider.stage}
      Component: authentication
      Type: integration
    events:
      - http:
          path: oauth/{provider}/redirect
          method: get
          request:
            parameters:
              paths:
                provider: true

  # USERS
  registerDevice:
    handler: source/bin/registerDevice
    name: register-device-${self:provider.stage}
    description: "Register a device with a user for notifications"
    environment:
      GOOGLE_PLATFORM_APP: arn:aws:sns:ap-southeast-2:135314794262:app/GCM/google-fcm-notifications-dev
      APPLE_PLATFORM_APP: arn:aws:sns:ap-southeast-2:135314794262:app/APNS/apple-apn-notifications-dev
    package:
      include:
        - ./source/bin/registerDevice
    tags:
      Environment: ${self:provider.stage}
      Component: notifications
      Type: integration
    events:
      - http:
          path: user/device
          method: post
          request:
            schema:
              application/json: ${file(schemas/device/register.json)}
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  deregisterDevice:
    handler: source/bin/deregisterDevice
    name: deregister-device-${self:provider.stage}
    description: "Deregister a device from a user for notifications"
    package:
      include:
        - ./source/bin/deregisterDevice
    tags:
      Environment: ${self:provider.stage}
      Component: notifications
      Type: integration
    events:
      - http:
          path: user/device
          method: delete
          request:
            schema:
              application/json: ${file(schemas/device/deregister.json)}
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  getUser:
    handler: source/bin/getUser
    name: get-user-${self:provider.stage}
    description: "Get a user"
    package:
      include:
        - ./source/bin/getUser
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: user/{userId}
          method: get
          request:
            parameters:
              paths:
                userId: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  updateUser:
    handler: source/bin/updateUser
    name: update-user-${self:provider.stage}
    description: "Update a user"
    package:
      include:
        - ./source/bin/updateUser
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: user
          method: put
          request:
            schema:
              application/json: ${file(schemas/user/update.json)}
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  getAvatarURL:
    handler: source/bin/getAvatarURL
    name: get-user-avatar-url-${self:provider.stage}
    description: "Generate a pre-signed URL for uploading a users avatar"
    environment:
      ASSETS_BUCKET: jaypi-${self:provider.stage}-rfacc
    package:
      include:
        - ./source/bin/getAvatarURL
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: user/avatar
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  # GROUPS
  createGroup:
    handler: source/bin/createGroup
    name: create-group-${self:provider.stage}
    description: "Create a group"
    package:
      include:
        - ./source/bin/createGroup
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group
          method: post
          request:
            schema:
              application/json: ${file(schemas/group/create.json)}
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  getGroup:
    handler: source/bin/getGroup
    name: get-group-${self:provider.stage}
    description: "Get a group"
    package:
      include:
        - ./source/bin/getGroup
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}
          method: get
          request:
            parameters:
              paths:
                groupId: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  getGroupMembers:
    handler: source/bin/getGroupMembers
    name: get-group-members-${self:provider.stage}
    description: "Get the members of a group"
    package:
      include:
        - ./source/bin/getGroupMembers
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}/members
          method: get
          request:
            parameters:
              querystrings:
                withVotes: true
              paths:
                groupId: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  updateGroup:
    handler: source/bin/updateGroup
    name: update-group-${self:provider.stage}
    description: "Update a group"
    package:
      include:
        - ./source/bin/updateGroup
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}
          method: put
          request:
            parameters:
              paths:
                groupId: true
            schema:
              application/json: ${file(schemas/group/update.json)}
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  joinGroup:
    handler: source/bin/joinGroup
    name: join-group-${self:provider.stage}
    description: "Join a group"
    package:
      include:
        - ./source/bin/joinGroup
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/membership
          method: post
          request:
            schema:
              application/json: ${file(schemas/group/join.json)}
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  leaveGroup:
    handler: source/bin/leaveGroup
    name: leave-group-${self:provider.stage}
    description: "Leave a group"
    package:
      include:
        - ./source/bin/leaveGroup
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/membership
          method: delete
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  getGroupQR:
    handler: source/bin/getGroupQR
    name: get-group-qr-${self:provider.stage}
    description: "Get the QR invite for a group"
    package:
      include:
        - ./source/bin/getGroupQR
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}/qr
          method: get
          request:
            parameters:
              paths:
                groupId: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  createGame:
    handler: source/bin/createGame
    name: create-game-${self:provider.stage}
    description: "Create a game"
    package:
      include:
        - ./source/bin/createGame
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}/game
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  updateGame:
    handler: source/bin/updateGame
    name: update-game-${self:provider.stage}
    description: "Update a game"
    package:
      include:
        - ./source/bin/updateGame
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}/game/{gameId}
          method: put
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  deleteGame:
    handler: source/bin/deleteGame
    name: delete-game-${self:provider.stage}
    description: "Delete a game"
    package:
      include:
        - ./source/bin/deleteGame
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}/game/{gameId}
          method: delete
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  getGames:
    handler: source/bin/getGames
    name: get-games-${self:provider.stage}
    description: "Get games for a group"
    package:
      include:
        - ./source/bin/getGames
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: group/{groupId}/game
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  # VOTES
  createVote:
    handler: source/bin/createVote
    name: create-vote-${self:provider.stage}
    description: "Create a song vote"
    package:
      include:
        - ./source/bin/createVote
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: user/vote
          method: post
          request:
            schema:
              application/json: ${file(schemas/votes/create.json)}
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  deleteVote:
    handler: source/bin/deleteVote
    name: delete-vote-${self:provider.stage}
    description: "Delete a song vote"
    package:
      include:
        - ./source/bin/deleteVote
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    events:
      - http:
          path: user/vote/{songId}
          method: delete
          request:
            parameters:
              paths:
                songId: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  # SEARCH
  songSearch:
    handler: source/bin/songSearch
    name: song-search-${self:provider.stage}
    description: "Search for a song, proxied via Spotify"
    package:
      include:
        - ./source/bin/songSearch
    tags:
      Environment: ${self:provider.stage}
      Component: api
      Type: integration
    environment:
      SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}
      SPOTIFY_SECRET_ID: ${env:SPOTIFY_SECRET_ID}
    events:
      - http:
          path: search
          method: get
          request:
            parameters:
              querystrings:
                query: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
