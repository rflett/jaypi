service: jjj-api
frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  region: ap-southeast-2
  stage: ${opt:staging, 'dev'}
  role: arn:aws:iam::292374005836:role/lambda-jaypi
  environment:
    JAYPI_TABLE: jaypi

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:

  # Chune Machine
  chuneMachine:
    handler: bin/chuneMachine
    name: chune-machine-${self:provider.stage}
    description: "Listen to what's playing on JJJ"
    memorySize: 128
    timeout: 20
    reservedConcurrency: 1
    environment:
      SPOTIFY_CLIENT_ID: ${file(env.yml):SpotifyClientID, ${opt:SpotifyClientID}}
      SPOTIFY_SECRET_ID: ${file(env.yml):SpotifySecretID, ${opt:SpotifySecretID}}
      REFRESH_QUEUE: https://sqs.ap-southeast-2.amazonaws.com/292374005836/chune-refresh-${self:provider.stage}
      COUNTER_QUEUE: https://sqs.ap-southeast-2.amazonaws.com/292374005836/bean-counter-${self:provider.stage}
    events:
      - sqs:
          arn: arn:aws:sqs:ap-southeast-2:292374005836:chune-refresh-${self:provider.stage}
          batchSize: 1
          enabled: true

  # USERS
  createUser:
    handler: bin/createUser
    name: create-user-${self:provider.stage}
    description: "Create a user"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: user
          method: post
          request:
            schema:
              application/json: ${file(schemas/user/create.json)}

  getUser:
    handler: bin/getUser
    name: get-user-${self:provider.stage}
    description: "Get a user"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: user/{userId}
          method: get

  updateUser:
    handler: bin/updateUser
    name: update-user-${self:provider.stage}
    description: "Update a user"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: user/{userId}
          method: put
          request:
            schema:
              application/json: ${file(schemas/user/update.json)}

  # GROUPS
  createGroup:
    handler: bin/createGroup
    name: create-group-${self:provider.stage}
    description: "Creates a group"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: group
          method: post
          request:
            schema:
              application/json: ${file(schemas/group/create.json)}

  getGroup:
    handler: bin/getGroup
    name: get-group-${self:provider.stage}
    description: "Get a group"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: group/{groupId}
          method: get

  updateGroup:
    handler: bin/updateGroup
    name: update-group-${self:provider.stage}
    description: "Update a group"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: group/{groupId}
          method: put
          request:
            schema:
              application/json: ${file(schemas/group/update.json)}

  joinGroup:
    handler: bin/joinGroup
    name: join-group-${self:provider.stage}
    description: "Join a group"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: group/join
          method: post
          request:
            schema:
              application/json: ${file(schemas/group/join.json)}

  leaveGroup:
    handler: bin/leaveGroup
    name: leave-group-${self:provider.stage}
    description: "Leave a group"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: group/{groupId}/user/{userId}
          method: delete

 # VOTES
  createVote:
    handler: bin/createVote
    name: create-vote-${self:provider.stage}
    description: "Create a vote"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: user/{userId}/vote
          method: post
          request:
            schema:
              application/json: ${file(schemas/votes/create.json)}

  deleteVote:
    handler: bin/deleteVote
    name: delete-vote-${self:provider.stage}
    description: "Delete a vote"
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: user/{userId}/vote/{songId}
          method: delete
